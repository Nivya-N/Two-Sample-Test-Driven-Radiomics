# -*- coding: utf-8 -*-
"""L1_metric.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1xdXFabtC6U4GYTM_g2bOV42ZCewTeVAl
"""

import numpy as np
#import l1_two_sample_test
import matplotlib.pyplot as plt
import matplotlib.pyplot as plt
import os
import pandas as pd
import os

import numpy as np
import pandas as pd

def feature_distances(healthy, unhealthy, feature_names):
    """
    Compute feature-wise L1 (Manhattan) distances between healthy and unhealthy datasets,
    including feature names.
    ----------
    healthy : array-like, shape = [n_samples_healthy, 87]
        Samples from the healthy dataset.
    unhealthy : array-like, shape = [n_samples_unhealthy, 87]
        Samples from the unhealthy dataset.
    feature_names : list of str
        Names of the features.
    Return
    ------
    distances_df : DataFrame
        A DataFrame with feature names and L1 distances.
    """
    assert healthy.shape[1] == unhealthy.shape[1] == len(feature_names), "Feature count mismatch."

    # Compute mean for each feature
    mean_healthy = np.mean(healthy, axis=0)
    mean_unhealthy = np.mean(unhealthy, axis=0)

    # Compute L1 distances
    distances = np.abs(mean_healthy - mean_unhealthy)

    # Create a DataFrame for clarity
    distances_df = pd.DataFrame({
        "Feature": feature_names,
        "L1_Distance": distances
    })

    return distances_df

# Load datasets
df_healthy = pd.read_csv("/content/drive/MyDrive/radiomic_features_mci_oct10.csv")
df_unhealthy = pd.read_csv("/content/drive/MyDrive/radiomic_features_nc_oct10 .csv")

# Extract numeric data
def extract_number(array_string):
    if isinstance(array_string, str) and 'array' in array_string:
        return float(array_string.split('(')[1].split(')')[0])
    return array_string

for df in [df_healthy, df_unhealthy]:
    for column in df.columns:
        df[column] = df[column].apply(extract_number)

feature_names = df_healthy.columns  # Get feature names
healthy_data = df_healthy.to_numpy()
unhealthy_data = df_unhealthy.to_numpy()

# Compute feature-wise distances
distances_df = feature_distances(healthy_data, unhealthy_data, feature_names)

print("Feature-wise L1 distances:")
print(distances_df)

print(distances_df)

# Export distances_df to a CSV file
output_path = "/content/feature_distances.csv"  # Set your desired file path
distances_df.to_csv(output_path, index=False)

print(f"Feature distances saved to {output_path}")

