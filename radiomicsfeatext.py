# -*- coding: utf-8 -*-
"""RadiomicsFeatExt.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1dTPOM7a9QGwQ1l0xEG8KNFnop-VP2j9Y
"""

!pip3 install pyradiomics
!pip install nibabel
import SimpleITK as sitk
import pandas as pd
import os
from radiomics import featureextractor
import numpy as np
from radiomics import firstorder, glcm, imageoperations, shape, glrlm, glszm, gldm, ngtdm
import six

#function for mask generation
def threshold_segmentation(image_path, lower_threshold, upper_threshold):
    threshold_filter = sitk.BinaryThresholdImageFilter()
    threshold_filter.SetLowerThreshold(lower_threshold)
    threshold_filter.SetUpperThreshold(upper_threshold)
    threshold_filter.SetInsideValue(1)
    threshold_filter.SetOutsideValue(0)
    mask = threshold_filter.Execute(image)

    # Copy geometry (origin, spacing, direction) from the image to the mask
    mask.CopyInformation(image)
    return mask

def rad_feat_ext(image,mask):
  data = {}

  extractor = featureextractor.RadiomicsFeatureExtractor()
  mask.SetOrigin(image.GetOrigin())

    # Extract features
  #features = extractor.execute(image, mask)

    # First order features
  firstOrderFeatures = firstorder.RadiomicsFirstOrder(image, mask)
  firstOrderFeatures.enableAllFeatures()
  result = firstOrderFeatures.execute()
  print('Calculated first order features: ')
  for (key, val) in six.iteritems(result):
      print('  ', key, ':', val)
  data_fof = {key: [val] for key, val in six.iteritems(result)}

    #GLCM Features
  glcmFeatures = glcm.RadiomicsGLCM(image, mask)
  glcmFeatures.enableAllFeatures()
  result = glcmFeatures.execute()
  print('Calculated GLCM features: ')
  for (key, val) in six.iteritems(result):
      print('  ', key, ':', val)
  data_glcm= {key: [val] for key, val in six.iteritems(result)}

    #GLRLM Features
  glrlmFeatures = glrlm.RadiomicsGLRLM(image, mask)
  glrlmFeatures.enableAllFeatures()
  result = glrlmFeatures.execute()
  for (key, val) in six.iteritems(result):
    print('  ', key, ':', val)
  data_glrlm = {key: [val] for key, val in six.iteritems(result)}

  #GLSZM Features
  glszmFeatures = glszm.RadiomicsGLSZM(image, mask)
  glszmFeatures.enableAllFeatures()
  result = glszmFeatures.execute()
  print('Calculated GLSZM features: ')
  for (key, val) in six.iteritems(result):
    data_glszm = {key: [val] for key, val in six.iteritems(result)}

  #GLDM Features
  # Extract GLDM features
  gldmFeatures = gldm.RadiomicsGLDM(image, mask)
  gldmFeatures.enableAllFeatures()
  result = gldmFeatures.execute()
  for (key, val) in six.iteritems(result):
    #print('  ', key, ':', val)
    data_gldm = {key: [val] for key, val in six.iteritems(result)}

  #NGDTM Features
   # Extract NGDTM features
  ngdtmFeatures = ngtdm.RadiomicsNGTDM(image, mask)
  ngdtmFeatures.enableAllFeatures()
  result = ngdtmFeatures.execute()
  for (key, val) in six.iteritems(result):
    #print('  ', key, ':', val)
    data_ngdtm = {key: [val] for key, val in six.iteritems(result)}
 #SHAPE Features
  '''shapeFeatures = shape.RadiomicsShape(image, mask)
  shapeFeatures.enableAllFeatures()
  result = shapeFeatures.execute()  #print('Calculated SHAPE features: ')
  for (key, val) in six.iteritems(result):
    #print('  ', key, ':', val)
    data_shape = {key: [val] for key, val in six.iteritems(result)}'''
  # Combine all features into a single dictionary
  data = data_fof | data_glcm | data_glrlm | data_glszm |data_gldm | data_ngdtm
  return data

features = []
image_folder = '/content/drive/MyDrive/AD_NII'
count = 1
#processed_files = set()  # Set to keep track of processed files
for filename in os.listdir(image_folder):
    if filename.endswith('.nii') :  # Modify as per your image format
        image_path = os.path.join(image_folder, filename)
        print(f"Processing: {image_path}")
        print(count)
        count += 1
        if count == 52:
          continue;
        image = sitk.ReadImage(image_path)
        mask = threshold_segmentation(image_path, lower_threshold=0, upper_threshold=200)
        data = rad_feat_ext(image,mask) #extracting feature from each image
        features.append(data)
        #processed_files.add(filename)  # Add the file name to the set

df = pd.DataFrame(features)
  # Specify the file name
csv_file = "radiomic_features_AD_dec25.csv"

  # Write DataFrame to CSV file
df.to_csv(csv_file, index=False)
print(f"Data written to {csv_file}")

from google.colab import drive
drive.mount('/content/drive')