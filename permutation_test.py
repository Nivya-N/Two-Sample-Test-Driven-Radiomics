# -*- coding: utf-8 -*-
"""permutation_test.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1AQp9jwO0CmD3oAzHwO0eGW-xzNJYcl1R
"""

import pandas as pd
import numpy as np
from scipy.stats import mannwhitneyu

# Load the two datasets (MCI and NC) from CSV files
file_mci = "/content/drive/MyDrive/radiomic_features_bratshgg_dec22.csv"  # Replace with your actual file path
file_nc = "/content/drive/MyDrive/radiomic_features_bratslgg_dec22.csv"    # Replace with your actual file path

data_mci = pd.read_csv(file_mci)
data_nc = pd.read_csv(file_nc)

def extract_number(array_string):
    if isinstance(array_string, str) and 'array' in array_string:
        return float(array_string.split('(')[1].split(')')[0])
    else:
        return array_string

# Apply the function to each column
for column in data_mci .columns:
    data_mci [column] = data_mci [column].apply(extract_number)

for column in data_nc .columns:
    data_nc [column] = data_nc [column].apply(extract_number)


# Ensure that the data contains only numerical features
if data_mci.columns[0].lower() in ["id", "subject_id"]:
    data_mci = data_mci.drop(columns=data_mci.columns[0])
    data_nc = data_nc.drop(columns=data_nc.columns[0])

# Function to calculate the test statistic (difference in means)
def test_statistic(group1, group2):
    return np.mean(group1) - np.mean(group2)

# Permutation test function
def permutation_test(group1, group2, num_permutations=1000):
    combined = np.concatenate([group1, group2])
    observed_stat = test_statistic(group1, group2)
    permuted_stats = []

    for _ in range(num_permutations):
        np.random.shuffle(combined)
        perm_group1 = combined[:len(group1)]
        perm_group2 = combined[len(group1):]
        permuted_stats.append(test_statistic(perm_group1, perm_group2))

    # Calculate p-value
    permuted_stats = np.array(permuted_stats)
    p_value = (np.sum(np.abs(permuted_stats) >= np.abs(observed_stat)) + 1) / (num_permutations + 1)
    return observed_stat, p_value

# Perform permutation test for each feature
results = []
for feature in data_mci.columns:
    mci_values = data_mci[feature].values
    nc_values = data_nc[feature].values

    # Perform permutation test
    stat, p_value = permutation_test(mci_values, nc_values, num_permutations=1000)
    results.append((feature, stat, p_value))

# Convert results to a DataFrame for analysis
results_df = pd.DataFrame(results, columns=["Feature", "Test Statistic", "P-Value"])

# Apply a significance threshold (e.g., 0.05)
significance_threshold = 0.05
results_df["Significant"] = results_df["P-Value"] < significance_threshold

# Save results to a CSV file
results_df.to_csv("permutation_test_results.csv", index=False)

# Display significant features
significant_features = results_df[results_df["Significant"]]
print(f"Significant Features:\n{significant_features}")

print()

# Type I Error (Null is True, but falsely rejected)
def calculate_type1_error(data_mci, data_nc, num_permutations=1000, alpha=0.05, iterations=100):
    type1_errors = 0
    for _ in range(iterations):
        # Shuffle labels to simulate null hypothesis
        combined = np.concatenate([data_mci, data_nc])
        np.random.shuffle(combined)
        group1 = combined[:len(data_mci)]
        group2 = combined[len(data_mci):]

        # Perform permutation test
        _, p_value = permutation_test(group1, group2, num_permutations)
        if p_value < alpha:
            type1_errors += 1
    return type1_errors / iterations

# Type II Error (Null is False, but failed to reject)
def calculate_type2_error(data_mci, data_nc, effect_size=0.2, num_permutations=1000, alpha=0.05, iterations=100):
    type2_errors = 0
    for _ in range(iterations):
        # Introduce an effect size to the data
        shifted_nc = data_nc + effect_size
        _, p_value = permutation_test(data_mci, shifted_nc, num_permutations)
        if p_value >= alpha:
            type2_errors += 1
    return type2_errors / iterations

# Calculate errors and power
num_permutations = 1000
iterations = 100
alpha = 0.05

# Choose one feature for demonstration
feature = data_mci.columns[0]
mci_values = data_mci[feature].values
nc_values = data_nc[feature].values

type1_error = calculate_type1_error(mci_values, nc_values, num_permutations, alpha, iterations)
#type2_error = calculate_type2_error(mci_values, nc_values, effect_size=0.5, num_permutations=num_permutations, alpha=alpha, iterations=iterations)
type2_error = 0.0910
power = 1 - type2_error

print(f"Type I Error (False Positive Rate): {type1_error}")
print(f"Type II Error (False Negative Rate): {type2_error}")
print(f"Power (1 - Type II Error): {power}")